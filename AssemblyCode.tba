
;Cristian Lopez
;UART & SRAM
;CSULB CECS 490

;Last login April 8, 2018
;CRISTIANs-PC:~ 

STATE             EQU   R0
CHAR_PTR          EQU   R1
LEDS              EQU   R2
COUNTER           EQU   R3
CHAR_STR          EQU   R4
RE                EQU   R5
RD                EQU   R6
RB                EQU   R7
STATUS            EQU   R8
SWITCHES          EQU   R9
RX_DATA           EQU   RA
TEMP_ST           EQU   RB
RAM               EQU   RC

        
START
;------------------------------------STORE LETTERS IN SCHATCHPAD 
        LOAD    STATE       0008
        LOAD    LEDS        0001
        LOAD    CHAR_PTR    8000
        LOAD    COUNTER     0000
        LOAD    RAM         8000
       ;------------------------------Banner----- CRISTIANs-PC:~ ---------0 to 1E

        LOAD    CHAR_STR      004C ; L 
        STORE   CHAR_STR      0000

        LOAD  CHAR_STR,       0061 ; a
        STORE CHAR_STR,       0001

        LOAD  CHAR_STR,       0073 ;s
        STORE CHAR_STR,       0002   
  
        LOAD  CHAR_STR,       0074 ;t
        STORE CHAR_STR,       0003

        LOAD  CHAR_STR,       0020 ; SPACE
        STORE CHAR_STR,       0004

        LOAD  CHAR_STR,       004C ; l
        STORE CHAR_STR,       0005

        LOAD  CHAR_STR,       006f ; o
        STORE CHAR_STR,       0006

        LOAD  CHAR_STR,       0067 ;g
        STORE CHAR_STR,       0007

        LOAD  CHAR_STR,       0069 ;i
        STORE CHAR_STR,       0008

        LOAD  CHAR_STR,       006e ;n
        STORE CHAR_STR,       0009

        LOAD  CHAR_STR,       003a ;
        STORE CHAR_STR,       000A

        LOAD  CHAR_STR,       0020 ; 
        STORE CHAR_STR,       000B
        
        LOAD  CHAR_STR,       004d ; M
        STORE CHAR_STR,       000C

        LOAD  CHAR_STR,       006f ; o
        STORE CHAR_STR,       000D

        LOAD  CHAR_STR,       006e ;n
        STORE CHAR_STR,       000E

        LOAD  CHAR_STR,       0020 ; SPACE
        STORE CHAR_STR,       000F

        LOAD  CHAR_STR,       0041 ;A
        STORE CHAR_STR,       0010

        LOAD  CHAR_STR,       0070 ;p
        STORE CHAR_STR,       0011

        LOAD  CHAR_STR,       0072 ;r
        STORE CHAR_STR,       0012

        LOAD  CHAR_STR,       0069 ;i
        STORE CHAR_STR,       0013 

        LOAD  CHAR_STR,       006C ;l
        STORE CHAR_STR,       0014 

        LOAD  CHAR_STR,       0020 ; SPACE
        STORE CHAR_STR,       0015

        LOAD  CHAR_STR,       0038 ;8
        STORE CHAR_STR,       0016

        LOAD  CHAR_STR,       002C ; SPACE
        STORE CHAR_STR,       0017

        LOAD  CHAR_STR,       0020 ; ,
        STORE CHAR_STR,       0018

        LOAD  CHAR_STR,       0032 ;2
        STORE CHAR_STR,       0019
      
        LOAD  CHAR_STR,       0030 ;0
        STORE CHAR_STR,       001A

        LOAD  CHAR_STR,       0031 ;1
        STORE CHAR_STR,       001B

        LOAD  CHAR_STR,       0039 ;9
        STORE CHAR_STR,       001C

        LOAD  CHAR_STR,       000D ;CR
        STORE CHAR_STR,       001D

        LOAD  CHAR_STR,       000A ;LF
        STORE CHAR_STR,       001E


;------------------------------PROMPT----- CRISTIANs-PC:~   1F TO 2E

        LOAD  CHAR_STR,       0043 ;C
        STORE CHAR_STR,       001F

        LOAD  CHAR_STR,       0052 ;R
        STORE CHAR_STR,       0020

        LOAD  CHAR_STR,       0049 ;I
        STORE CHAR_STR,       0021

        LOAD  CHAR_STR,       0053 ;S
        STORE CHAR_STR,       0022

        LOAD  CHAR_STR,       0054 ;T
        STORE CHAR_STR,       0023

        LOAD  CHAR_STR,       0049 ;I
        STORE CHAR_STR,       0024

        LOAD  CHAR_STR,       0041 ;A
        STORE CHAR_STR,       0025    

        LOAD  CHAR_STR,       004E ;N
        STORE CHAR_STR,       0026  

        LOAD  CHAR_STR,       0073 ;s
        STORE CHAR_STR,       0027  

        LOAD  CHAR_STR,       002D ;-
        STORE CHAR_STR,       0028  

        LOAD  CHAR_STR,       0050 ;P
        STORE CHAR_STR,       0029 

        LOAD  CHAR_STR,       0043 ;C
        STORE CHAR_STR,       002A 

        LOAD  CHAR_STR,       003A ;:
        STORE CHAR_STR,       002B 

        LOAD  CHAR_STR,       007E ;~
        STORE CHAR_STR,       002C 



;------------------------------ Hometown: Visalia, Ca     2F TO 45

        LOAD  CHAR_STR,       0048 ;H
        STORE CHAR_STR,       002F

        LOAD  CHAR_STR,       006F ;o
        STORE CHAR_STR,       0030

        LOAD  CHAR_STR,       006D ;m
        STORE CHAR_STR,       0031

        LOAD  CHAR_STR,       0065 ;e
        STORE CHAR_STR,       0032

        LOAD  CHAR_STR,       0074 ;t
        STORE CHAR_STR,       0033

        LOAD  CHAR_STR,       006F ;o
        STORE CHAR_STR,       0034

        LOAD  CHAR_STR,       0077 ;w
        STORE CHAR_STR,       0035

        LOAD  CHAR_STR,       006E ;n
        STORE CHAR_STR,       0036

        LOAD  CHAR_STR,       003A ;:
        STORE CHAR_STR,       0037

        LOAD  CHAR_STR,       0020 ; 
        STORE CHAR_STR,       0038

        LOAD  CHAR_STR,       0056 ;V
        STORE CHAR_STR,       0039

        LOAD  CHAR_STR,       0069 ;i
        STORE CHAR_STR,       003A

        LOAD  CHAR_STR,       0073 ;s
        STORE CHAR_STR,       003B

        LOAD  CHAR_STR,       0061 ;a
        STORE CHAR_STR,       003C

        LOAD  CHAR_STR,       006C ;l
        STORE CHAR_STR,       003D

        LOAD  CHAR_STR,       0069 ;i
        STORE CHAR_STR,       003E

        LOAD  CHAR_STR,       0061 ;a
        STORE CHAR_STR,       003F

        LOAD  CHAR_STR,       002C ;,
        STORE CHAR_STR,       0040

        LOAD  CHAR_STR,       0020 ; 
        STORE CHAR_STR,       0041

        LOAD  CHAR_STR,       0043 ;c
        STORE CHAR_STR,       0042

        LOAD  CHAR_STR,       0061 ;a
        STORE CHAR_STR,       0043

        LOAD  CHAR_STR,       000A ;LF
        STORE CHAR_STR,       0044

        LOAD  CHAR_STR,       000D ;CR
        STORE CHAR_STR,       0045

;------------------------------ Backspace
        LOAD    CHAR_STR,   0008 ;BACKSPACE
        STORE   CHAR_STR,   0046

        LOAD    CHAR_STR,   0020 ;SPACE
        STORE   CHAR_STR,   0047

        LOAD    CHAR_STR,   0008 ;BACKSPACE
        STORE   CHAR_STR,   0048

       ENINT
;------------------------------------MAIN WALKS LEDS
MAIN
        INPUT SWITCHES      0002 
        OUTPUT SWITCHES     0002

        LOAD        R8      0000 ;RESET DELAY COUNTER
        OUTPUT      LEDS    0001
        RL          LEDS
        CALL        DELAY
        JUMP        MAIN
DELAY   
        ADD         R8      0001
        COMP        R8      8000 ;STAY IN LOOP UNTILL FULL
        JUMPNZ      DELAY                ;BACK TO LOOP

;------------------------------------BIN TO ASCII

BIN_TO_ASCII    
                
                LOAD    RE,     COUNTER ; R2 GETS NUMBER TO CONVERT 

                LOAD    RD,      2710       ;10,000
                CALL    FIND       
                ADD     RB,     0030        ;CONVERT NUMBER TO ASCII
                STORE   RB,     0049   

                LOAD    RD,     03B8        ;1,000
                CALL    FIND            
                ADD     RB,     0030        ;CONVERT NUMBER TO ASCII
                STORE   RB,     004A
                
                LOAD    RD,     0064        ;100
                CALL    FIND            
                ADD     RB,     0030        ;CONVERT NUMBER TO ASCII
                STORE   RB,     004B

                LOAD    RD,     000A        ;10
                CALL    FIND           
                ADD     RB,     0030        ;CONVERT NUMBER TO ASCII
                STORE   RB,     004C

                ADD     RE,     0030        ;CONVERT NUMBER TO ASCII
                STORE   RE,     004D
                RETURN
                                
FIND            
                LOAD    RB,     0000
REPEAT                     
                SUB     RE,     RD 
                COMP    RE,     8000        ; CHECK FOR NEGATIVE NUMBER
                JUMPC   POSITIVE            ; IF NOT NEGATIVE JUMP
                ADD     RE,     RD          ; IF NEGATIVE R3<- R3 + RD
                RETURN

POSITIVE        
                ADD     RB,     0001        
                JUMP    REPEAT              ;REPEAT


;------------------------------------BIN TO ASCII DONE





;------------------------------------ISR START
        ADDRESS 0300
ISR
        INPUT   STATUS, 0001 ; check for the status signal- txrdy rxrdy.

        LOAD   TEMP_ST   STATUS
        AND    TEMP_ST   0002 ; 
        COMP   TEMP_ST,  0002 ; check if TXRDY is high
        CALLZ  TRANSMIT_SR

        LOAD   TEMP_ST   STATUS
        AND    TEMP_ST   0001 ; 
        COMP   TEMP_ST   0001 
        CALLZ  RECEIVE_SR

        RETEN


;------------------------------------ISR DONE 

TRANSMIT_SR
    
        COMP    STATE   0000 ;RECEIVIG STATE
        RETURNZ
 
        COMP      STATE     0007 ;    
        JUMPZ     PERCENT ;

        COMP       STATE    0008
        JUMPZ      MEM_TEST

        COMP       STATE    0009
        JUMPZ      AAAA_OUT

        COMP       STATE    000A
        JUMPZ      OUT_5555

        COMP       STATE    000B
        JUMPZ      ADDRESS_STORE

        COMP       STATE    000C
        JUMPZ      ADDRESS_OUTPUT

        FETCH   CHAR_STR    CHAR_PTR
        OUTPUT  CHAR_STR    0000
        ADD     CHAR_PTR    0001 ;

        COMP      STATE     0001 ;    
        JUMPZ     BANNER ;

        COMP      STATE     0002 ;    
        JUMPZ     PROMPT ;


        COMP      STATE     0003 ;    
        JUMPZ     ASTERIK_HOMETOWN ;


        COMP      STATE     0004 ;    
        JUMPZ     AT_COUNT ;


        COMP      STATE     0005 ;    
        JUMPZ     BACKSPACE ;

        COMP      STATE     0006 ;    
        JUMPZ     CR ; 

        RETURN

BANNER  
    COMP    CHAR_PTR     001F
    RETURNC
    LOAD    STATE       0002  ; GO TO OUTPUT PROMT ON NEXT TXRDY INTERRUPT
    LOAD    CHAR_PTR    001F  ; Where stored in SCHATCHPAD
    RETURN

PROMPT 
    COMP    CHAR_PTR    002D
    RETURNC
    LOAD    STATE       0000 ;WAIT FOR INPUT ON RX
    RETURN

ASTERIK_HOMETOWN
    COMP    CHAR_PTR    0046
    RETURNC
    LOAD    STATE       0002 ; OUTPUT PROMT ON NEXT TX INTERRUPT
    LOAD    CHAR_PTR    001F ; Where stored in SCHATCHPAD
    RETURN

AT_COUNT
    COMP    CHAR_PTR    004E              
    RETURNC                           
    LOAD    STATE       0002 ; OUTPUT PROMT ON NEXT TX INTERRUPT               ;;;;;;;;;;;;;;;;
    LOAD    CHAR_PTR    001D
    RETURN

BACKSPACE
    COMP    CHAR_PTR    0049  
    RETURNC
    LOAD    STATE       0000 ;WAIT FOR INPUT ON RX
    RETURN

CR  
    COMP    CHAR_PTR    0046       
    RETURNC
    LOAD    STATE       0002 ; OUTPUT PROMT ON NEXT TX INTERRUPT
    LOAD    CHAR_PTR    001F ; Where CR is stored in SCHATCHPAD
    RETURN

PERCENT
    INPUT   CHAR_STR    CHAR_PTR
    OUTPUT  CHAR_STR    0000  
    ADD     CHAR_PTR    0001
    COMP    CHAR_PTR    RAM
    RETURNC
    LOAD    STATE       0006 ; OUTPUT PROMT ON NEXT TX INTERRUPT
    LOAD    CHAR_PTR    0044 ; Where CR is stored in SCHATCHPAD
    RETURN

MEM_TEST
    LOAD    CHAR_STR    AAAA ;
    OUTPUT  CHAR_STR    CHAR_PTR
    ADD     CHAR_PTR    0001 ;
    COMP    CHAR_PTR    FFFF ;
    JUMPNZ  MEM_TEST
    LOAD    CHAR_STR    0000
    OUTPUT  CHAR_STR    0000 ; Trigger tx INTERRUPT
    LOAD    CHAR_PTR    8000
    LOAD    STATE       0009
    RETURN

AAAA_OUT
    INPUT   CHAR_STR    CHAR_PTR
    OUTPUT  CHAR_STR    0000
    ADD     CHAR_PTR    0001
    COMP    CHAR_PTR    FFFF ;
    RETURNC
    
    LOAD    CHAR_PTR    8000 ; 
    LOAD    CHAR_STR    5555
MEM_5555
    OUTPUT  CHAR_STR    CHAR_PTR
    ADD     CHAR_PTR    0001 
    COMP    CHAR_PTR    FFFF
    JUMPNZ  MEM_5555
    LOAD    CHAR_PTR    8000
    LOAD    STATE       000A ; 
    RETURN

OUT_5555
    INPUT   CHAR_STR    CHAR_PTR
    OUTPUT  CHAR_STR    0000
    ADD     CHAR_PTR    0001
    COMP    CHAR_PTR    FFFF ;
    RETURNC
    LOAD    STATE       000B  ; 
    LOAD    CHAR_PTR    8000  ;
    LOAD 	CHAR_STR 	0000 ; 
    RETURN


ADDRESS_STORE
	OUTPUT	CHAR_STR	CHAR_PTR 	 	
	ADD 	CHAR_STR 	0001 
	ADD 	CHAR_PTR 	0001
	COMP    CHAR_PTR    FFFF ;
    JUMPNZ  ADDRESS_STORE
    LOAD 	STATE 		000C
    LOAD	CHAR_PTR	8000
    OUTPUT  CHAR_STR    0000 ; Trigger tx INTERRUPT
    RETURN	

ADDRESS_OUTPUT
	INPUT 	CHAR_STR 	CHAR_PTR
	OUTPUT	CHAR_STR	0000
	ADD 	CHAR_PTR 	0001
 	COMP    CHAR_PTR    FFFF ;
    RETURNC
    LOAD    STATE       0001  ; GO TO OUTPUT PROMT ON NEXT TXRDY INTERRUPT
    LOAD    CHAR_PTR    0000  ; Where stored in SCHATCHPAD
    RETURN


RECEIVE_SR
        COMP    STATE   0000   ; ONLY ENTER IF CORRECT STATE
        RETURNNZ    

        INPUT   RX_DATA 0000
        COMP    RX_DATA 0000 ; RETURN WHEN EMPTY
        RETURNZ

        COMP    RX_DATA, 0040 ;CHECK FOR @
        JUMPZ   AT_CHAR

        COMP    RX_DATA, 002A ;CHECK FOR *
        JUMPZ   ASTERIK_CHAR

        COMP    RX_DATA, 007F ;CHECK FOR BACKSPACE
        JUMPZ   BACKSPACE_CHAR

        COMP    RX_DATA, 000D ;CHECK FOR CR
        JUMPZ   CR_CHAR

        COMP    RX_DATA, 0025 ;CHECK FOR %
        JUMPZ   PERCENT_CHAR

        OUTPUT  RX_DATA, 0000
        OUTPUT  RX_DATA, RAM  ;SEND CHAR TO RAM MODULE TO STORE
                
        ADD     RAM         0001   
        ADD     COUNTER     0001 ; 
        COMP    COUNTER     0028 ;MAX OF 40 CHARACTERS IN A LINE
        JUMPZ   CR_CHAR

        RETURN


ASTERIK_CHAR      ;----------------------------HOMETOWN, NEWLINE, PROMT     
    LOAD    STATE       0003
    LOAD    CHAR_PTR    002F  
    LOAD    COUNTER     0000  
    LOAD    TEMP_ST     0000
    OUTPUT  TEMP_ST     0000
    RETURN

AT_CHAR        ;----------------------------COUNTER FOR CHARACTERS
    CALL    BIN_TO_ASCII
    LOAD    STATE       0004
    LOAD    CHAR_PTR    0049        ;; BIN TO ASLLL
    LOAD    COUNTER     0000
    LOAD    TEMP_ST     0000
    OUTPUT  TEMP_ST     0000
    RETURN


BACKSPACE_CHAR ;----------------------------DELETE CHARACTER  
    COMP    COUNTER     0000 ; NOT ERASE PROMPT
    RETURNZ
    LOAD    STATE       0005
    SUB     COUNTER     0001
    SUB     RAM         0001
    LOAD    CHAR_PTR    0046 ;BACKSPACE BEGINs
    LOAD    TEMP_ST     0000
    OUTPUT  TEMP_ST     0000
    RETURN

CR_CHAR        ;----------------------------ENTER WAS PRESSED
    LOAD    STATE       0006
    LOAD    CHAR_PTR    0044
    LOAD    TEMP_ST     0000
    OUTPUT  TEMP_ST     0000
    RETURN

PERCENT_CHAR
    LOAD    STATE       0007
    LOAD    CHAR_PTR    8000 ;USED TO POINT TO RAM
    LOAD    TEMP_ST     0000
    OUTPUT  TEMP_ST     0000
    RETURN


        ADDRESS 0FFE
ENDIT   
        JUMP    ISR


        END
